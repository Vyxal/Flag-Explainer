from flask import Flask, request, redirect, url_for
app = Flask(__name__)
def real_explain(flags):
    expdict = {'H': 'Preset stack to 100', 'j': 'Print top of stack joined by newlines on end of execution', 'L': 'Print top of stack joined by newlines (Vertically) on end of execution', 's': 'Sum/concatenate top of stack on end of execution', 'M': 'Make implicit range generation and while loop counter start at 0 instead of 1', 'm': 'Make implicit range generation end at n-1 instead of n', 'Ṁ': 'Make implicit range generation and while loop counter start at 0 and end at n-1 instead of 1 and n.', 'v': 'Use Vyxal encoding for input file', 'c': 'Output compiled code', 'f': 'Get input from file instead of arguments', 'a': 'Treat newline seperated values as a list', 'd': 'Print deep sum of top of stack on end of execution', 'r': 'Makes all operations happen with reverse arguments', 'S': 'Print top of stack joined by spaces on end of execution', 'C': 'Centre the output and join on newlines on end of execution', 'O': 'Disable implicit output', 'o': 'Force implicit output', 'l': 'Print length of top of stack on end of execution', 'G': 'Print the maximum item of the top of stack on end of execution', 'g': 'Print the minimum item of the top of the stack on end of execution', 'W': 'Print the entire stack on end of execution', 'Ṡ': 'Treat all inputs as strings', 'R': 'Treat numbers as ranges if ever used as an iterable', 'D': "Treat all strings as raw strings (don't decompress strings)", 'U': "Treat all strings as UTF-8 byte sequences (also don't decompress strings)", 'Ṫ': 'Print the sum of the entire stack', 'ṡ': 'Print the entire stack, joined on spaces', 'Z': 'With four argument vectorization where all arguments are lists, use zip(zip(a, b), zip(c, d)) instead of zip(a, b, c, d)', 'J': 'Print the entire stack, separated by newlines', 't': 'Vectorise boolify on Lists', 'P': 'Print lists as their python representation', 'ḋ': 'Print rationals in their decimal form', 'V': 'Variables are one character long', 'E': 'Evaluate stdout as JavaScript (online interpreter only)', 'Ḣ': 'Render stdout as HTML (online interpreter only)', 'e': 'Use the file name as the program source (offline interpreter only)', '?': 'If there is empty input, treat it as 0 instead of empty string.', '2': 'Make the default arity of lambdas 2', '3': 'Make the default arity of lambdas 3', 'A': 'Run test cases on all inputs', '~': 'Run test cases on all inputs and report whether results match expected outputs', '…': 'Limit list output to the first 100 items of that list', '!': 'Read program file as bitstring', '=': 'Print bitstring of program (online interpreter also updates byte count)', '5': 'Make the interpreter timeout after 5 seconds (online interpreter only)', 'b': 'Make the interpreter timeout after 15 seconds (online interpreter only)', 'B': 'Make the interpreter timeout after 30 seconds (online interpreter only)', 'T': 'Make the interpreter timeout after 60 seconds (online interpreter only)'}
    try:
        rawdata = [(x,expdict[x]) for x in flags]
    except KeyError:
        return "Invalid flag combination."
    explanation = [flags] + [' ' * rawdata.index(x) + x[0] + ' ' * (len(rawdata) - 1 - rawdata.index(x)) + '    # ' + x[1] for x in rawdata]
    return '\n'.join(explanation)
@app.route('/')
def explain_flags():
    return '<form method="post" action="/explain"><input type="text" id="flags" name="input_flags"/><br/><br/><input type="submit" value="Explain Flags"/></form>'
@app.route('/explain',methods=['POST','GET'])
def get_result():
    return '<textarea style="height: 119px; width: 602px; resize: none;">{}</textarea><br/><br/><a href="/../"><input type="button" value="Back"/></a>'.format(real_explain(request.form['input_flags']))
